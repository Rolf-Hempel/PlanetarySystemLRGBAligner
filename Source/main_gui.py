# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_gui.ui'
#
# Created by: PyQt5 UI code generator 5.11.2
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1011, 822)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.centralwidget.setFont(font)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_3.setSpacing(6)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.verticalLayout_3.addLayout(self.gridLayout_2)
        self.controlButtons = QtWidgets.QGroupBox(self.centralwidget)
        self.controlButtons.setTitle("")
        self.controlButtons.setObjectName("controlButtons")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.controlButtons)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.buttonLoadBW = QtWidgets.QPushButton(self.controlButtons)
        self.buttonLoadBW.setObjectName("buttonLoadBW")
        self.gridLayout_3.addWidget(self.buttonLoadBW, 1, 0, 1, 1)
        self.buttonLoadColor = QtWidgets.QPushButton(self.controlButtons)
        self.buttonLoadColor.setObjectName("buttonLoadColor")
        self.gridLayout_3.addWidget(self.buttonLoadColor, 1, 1, 1, 1)
        self.buttonSaveRegisteredColorImage = QtWidgets.QPushButton(self.controlButtons)
        self.buttonSaveRegisteredColorImage.setObjectName("buttonSaveRegisteredColorImage")
        self.gridLayout_3.addWidget(self.buttonSaveRegisteredColorImage, 1, 2, 1, 1)
        self.buttonSetConfigParams = QtWidgets.QPushButton(self.controlButtons)
        self.buttonSetConfigParams.setObjectName("buttonSetConfigParams")
        self.gridLayout_3.addWidget(self.buttonSetConfigParams, 0, 2, 1, 1)
        self.verticalLayout_3.addWidget(self.controlButtons)
        self.ImageWindow = QtWidgets.QLabel(self.centralwidget)
        self.ImageWindow.setText("")
        self.ImageWindow.setObjectName("ImageWindow")
        self.verticalLayout_3.addWidget(self.ImageWindow)
        self.selectImage = QtWidgets.QGroupBox(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.selectImage.setFont(font)
        self.selectImage.setObjectName("selectImage")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.selectImage)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.radioShowBW = QtWidgets.QRadioButton(self.selectImage)
        self.radioShowBW.setObjectName("radioShowBW")
        self.horizontalLayout.addWidget(self.radioShowBW)
        self.radioShowColorOrig = QtWidgets.QRadioButton(self.selectImage)
        self.radioShowColorOrig.setObjectName("radioShowColorOrig")
        self.horizontalLayout.addWidget(self.radioShowColorOrig)
        self.radioShowColorRigidTransform = QtWidgets.QRadioButton(self.selectImage)
        self.radioShowColorRigidTransform.setObjectName("radioShowColorRigidTransform")
        self.horizontalLayout.addWidget(self.radioShowColorRigidTransform)
        self.radioShowColorOptFlow = QtWidgets.QRadioButton(self.selectImage)
        self.radioShowColorOptFlow.setObjectName("radioShowColorOptFlow")
        self.horizontalLayout.addWidget(self.radioShowColorOptFlow)
        self.radioShowMatches = QtWidgets.QRadioButton(self.selectImage)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioShowMatches.setFont(font)
        self.radioShowMatches.setObjectName("radioShowMatches")
        self.horizontalLayout.addWidget(self.radioShowMatches)
        self.verticalLayout_3.addWidget(self.selectImage)
        self.verticalLayout_3.setStretch(2, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Solar System LRGB Aligner"))
        self.buttonLoadBW.setToolTip(_translate("MainWindow", "Select and load file of B/W reference image"))
        self.buttonLoadBW.setText(_translate("MainWindow", "Load B/W image"))
        self.buttonLoadColor.setToolTip(_translate("MainWindow", "Select and load file of color image to be registered with B/W image"))
        self.buttonLoadColor.setText(_translate("MainWindow", "Load color image"))
        self.buttonSaveRegisteredColorImage.setToolTip(_translate("MainWindow", "Save registered color image to disk"))
        self.buttonSaveRegisteredColorImage.setText(_translate("MainWindow", "Save registered color image"))
        self.buttonSetConfigParams.setToolTip(_translate("MainWindow", "Select parameters for two-stage registration process (rigid transform and pixelwise match)"))
        self.buttonSetConfigParams.setText(_translate("MainWindow", "Set configuration parameters"))
        self.selectImage.setTitle(_translate("MainWindow", "Select image to be displayed"))
        self.radioShowBW.setToolTip(_translate("MainWindow", "Show the B/W reference image (use mouse wheel for zooming, left mouse button for panning)"))
        self.radioShowBW.setText(_translate("MainWindow", "B/W"))
        self.radioShowColorOrig.setToolTip(_translate("MainWindow", "Show the original color image to be registered (use mouse wheel for zooming, left mouse button for panning)"))
        self.radioShowColorOrig.setText(_translate("MainWindow", "Color original"))
        self.radioShowColorRigidTransform.setToolTip(_translate("MainWindow", "Show the color image after rigid transformation (use mouse wheel for zooming, left mouse button for panning)"))
        self.radioShowColorRigidTransform.setText(_translate("MainWindow", "Color rigid transformation"))
        self.radioShowColorOptFlow.setToolTip(_translate("MainWindow", "Show the finally registered color image (use mouse wheel for zooming, left mouse button for panning)"))
        self.radioShowColorOptFlow.setText(_translate("MainWindow", "Color pixelwise matched"))
        self.radioShowMatches.setToolTip(_translate("MainWindow", "Show the keypoints and their matches used for rigid transformation (use mouse wheel for zooming, left mouse button for panning)"))
        self.radioShowMatches.setText(_translate("MainWindow", "Keypoint matches"))

